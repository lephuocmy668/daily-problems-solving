// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package reduce

import (
	"reflect"
	"strings"
	"testing"
)

type Example struct {
	a string
	b string
}

func TestStringReduce(t *testing.T) {
	type args struct {
		collection []string
		iteratee   StringIteratee
		initAccum  interface{}
	}
	tests := []struct {
		name string
		args args
		want interface{}
	}{
		// TODO: Add test cases.
		{
			name: "Join string",
			args: args{
				collection: []string{"m", "y", "l", "p"},
				iteratee: func(accumulator interface{}, item string, index int, arr []string) interface{} {
					x := []string{accumulator.(string), item}
					return strings.Join(x, "")
				},
				initAccum: "",
			},
			want: "mylp",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := StringReduce(tt.args.collection, tt.args.iteratee, tt.args.initAccum); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("StringReduce() = %v, want %v", got, tt.want)
			}
		})
	}
}
